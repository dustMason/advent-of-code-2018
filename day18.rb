require 'set'

OPEN = '.'
TREE = '|'
LMBR = '#'

input = DATA.read

land = {}

input.each_line.with_index do |line, y|
  line.strip.each_char.with_index do |char, x|
    land[[x, y]] = char
  end
end

def adjacent(x, y)
  [
    [x - 1, y],
    [x + 1, y],
    [x, y - 1],
    [x, y + 1],
    [x - 1, y - 1],
    [x + 1, y - 1],
    [x + 1, y + 1],
    [x - 1, y + 1],
  ]
end

def pr(land)
  out = []
  land.each do |(x, y), char|
    out[y] ||= []
    out[y][x] = char
  end
  out.map(&:join)
end

# part_1 = 10
part_2 = 1000000000
frame_set = Set.new
frames = []

min, sequence = 1.step(to: part_2) do |min|
  new_land = land.dup

  land.each do |coord, char|
    kinds = adjacent(*coord).group_by { |c| land[c] }.transform_values!(&:size)

    case char
    when OPEN
      new_land[coord] = TREE if kinds[TREE]&.>= 3
    when TREE
      new_land[coord] = LMBR if kinds[LMBR] &.>= 3
    when LMBR
      new_land[coord] = OPEN if !kinds[TREE] || !kinds[LMBR]
    end
  end

  land = new_land

  frame = pr(land)
  if frame_set.member? frame
    before = frames.find_index(frame) + 1
    break [min, frames[(before - 1)...min]]
  end
  frame_set << frame
  frames << frame

  print '.'
end

remaining = part_2 - min
final_frame = remaining % sequence.size

joined = sequence[final_frame].join

puts
puts joined.count(TREE) * joined.count(LMBR)

__END__
#.|#||..#......##.#||..||....|.#.|.#...#.|..|||.|.
.#..#||..#...##|.|##|..#|..##..#.|...|..|.|##.....
.#|..#..|||.|.|...|..##|.|...|.......|..#.|.#.|...
|....##..#|.........||#|.|.#....#.|.#.#|......#|.#
|.#.|....|.|.#..##|..|...##...|....|.|..##..|.#.#|
...|.|...|....|###.....|.##.#...#........|........
||..||.#|.|.#.|...#....#.#..|#|#.###.|.|...|...|#.
|..|..#..#|....#|...##...#.||..#..#.|.|...#...|.|#
..#...|....|..|.|##...#.#.|#..#.|...#.#..#..#.#.|.
|#.|##.#....#.|.|||#.|#...#|.|#|#.###....|..|.|...
..||#..#..#.|.#...#.#..|.|...|.##|..|...#||....|..
||.|......|.#...##|..#.|.....##|.#..#.||...|.#|.|.
#...|....|..#.....|.#....||#||..|...#||........|#.
|.|....#...#|..#.....#..|..||#..|...#..|...#|.#...
..#|.#.##||#|.#...|...|...#.#||.....#|.|.|.|#|.|..
|..|#..|#...#..|#.|.#..|.#.#|...|.......##.|..##..
##..#|.#||......#...|..#.|.|..#.#...|...........|.
.#....#.|.#...|.#..|.###...|...##........###..|#.#
#......#||#..#..|..#..#|.#.|...||##..|.#.|###.##..
|#.|#......|...#..|#.#|.|.|.##.|#.|........#....#.
#.|.#.|..#..||...|..|#.|..|#|.#|...||.|...#||#|.|.
....#|..|...|##.#...#.||.|...|..#|#.......##...#..
..#..#..|..|...|.|#..|...|#...|..#..|.||.##.###...
.#...###...|#|....#|||..##......#|..#.#|..|#|.#|..
.||.|#....###|.#..##..|###.|...|.....#..|..#......
#.......#...||##..#...#..|..#...##.|#..|.|.#|.#...
|.....#|#....#...#.#.....|#....|#|#|##|#||....|.|#
......#|..#...#.|.....|.|...|.|#.|..|#.#.#.|..#...
|####......#.|.....|.|.....#..#.....|#.#|...#..#.|
||.............|....|||..#|#...##..#|.#.#|.#.|.#.|
..|.....#|.###..#|..#..||...|..|#|..|.||...#.|....
.####..#...#|.##..|#.||.#|#........|.|#|...#..|...
#.##.....#|...|...#.|###..|#|.....#...|..|.|#|.|.#
|.|##.|..|..#|#......#|#......#....#|||#...|#.#.#.
........|.|.#.|#...#.#.......|.|.#|...|#.......|#.
...#.##...#.###|#....||.|...#......|#...#.#...|.#.
|...|#..|.||...#.||.|##....#.##|..|.||.....#||....
#||..|.|......|...|||.#.#.#....|#...|#|.|...|.#..|
#.##.#....#|.|.|#...|..|####...#...|#...|....#....
#|..|||#|....|#|....||....#..#...|||#|.....#...#..
#|.|....||.#...#|.#.|....|...|..|#|.#.#.||..||.##|
|#.|.#...#|#.|...#.|.|..||.|.|..#.#||....#|.|##|..
....##|||#.#....#.##|.#.#|#|#.##....#|.....|..|...
#.|.....|.||.|.#|.#.#|#..##|.#|.##.#.#...#||||#...
.#|..||#...#|.#...|.#|.|.###...|.#....||.|...#..||
.......#...#...##|#....#.||#.....|.#..|..||||.....
.......#|..#......|.##..##..#.|.|||.|..|.##|#|#|#.
...#............#.##...|......#.||#..|.......##||.
.##||..#|##.....|||....|.......|.#.|.|.|...|..|..|
..#.|.#..#.#....#..#.|..||....#......##.|.#..#..#.
